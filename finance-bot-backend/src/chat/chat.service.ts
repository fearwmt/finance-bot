import { Injectable } from '@nestjs/common';
import OpenAI from 'openai';
import { TransactionService } from '../transaction/transaction.service';

@Injectable()
export class ChatService {
  private openai: OpenAI;

  constructor(private txService: TransactionService) {
    this.openai = new OpenAI({
      apiKey: process.env.OPENAI_API_KEY,
    });
  }

  async processMessage(message: string) {
  const numbers = message.match(/-?\d+(\.\d+)?/g);

  const nonFinanceKeywords = [
    "‡πÄ‡∏•‡πà‡∏≤",
    "‡∏ö‡∏≠‡∏Å",
    "‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢",
    "‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á",
    "‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå",
    "‡∏ó‡∏≥‡∏¢‡∏±‡∏á‡πÑ‡∏á",
    "‡∏ß‡∏¥‡∏ò‡∏µ",
    "‡∏Ñ‡∏∑‡∏≠‡∏≠‡∏∞‡πÑ‡∏£",
  ];

  const isGeneralQuestion = nonFinanceKeywords.some((k) =>
    message.includes(k)
  );

  if (numbers && !isGeneralQuestion) {
    const amount = parseFloat(numbers[numbers.length - 1]);
    const desc = message.replace(/-?\d+(\.\d+)?/g, "").trim();

    let type: "income" | "expense" = "expense";
    if (desc.includes("‡πÄ‡∏á‡∏¥‡∏ô‡πÄ‡∏î‡∏∑‡∏≠‡∏ô") || desc.includes("‡∏£‡∏≤‡∏¢‡∏£‡∏±‡∏ö")) {
      type = "income";
    }

    await this.txService.create({
      description: desc || "‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£",
      amount: Math.abs(amount),
      type,
      category: "general",
      date: new Date().toISOString(),
    });

    const summary = await this.txService.getSummary();
    return {
      reply: `‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å ${type === "income" ? "‡∏£‡∏≤‡∏¢‡∏£‡∏±‡∏ö" : "‡∏£‡∏≤‡∏¢‡∏à‡πà‡∏≤‡∏¢"} "${desc}" ${amount} ‡∏ö‡∏≤‡∏ó‡πÅ‡∏•‡πâ‡∏ß ‚úÖ ‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ‡∏¢‡∏≠‡∏î‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏Ñ‡∏∑‡∏≠ ${summary.balance} ‡∏ö‡∏≤‡∏ó`,
    };
  }

  const aiRes = await this.openai.chat.completions.create({
    model: "gpt-4o-mini",
    messages: [{ role: "user", content: message }],
  });

  return { reply: aiRes.choices[0].message?.content || "ü§ñ ‚Ä¶" };
}

}
